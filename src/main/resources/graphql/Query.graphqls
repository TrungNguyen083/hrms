# Define a query to fetch employees
type Query {
    #EmployeeManagement:
    employees(departmentIds: [Int], currentContracts: [Int],status: Boolean, name: String, pageNo: Int = 1, pageSize: Int = 10): EmployeePaging!
    employee(id: Int!): EmployeeDTO
    employeeId(email: String!): Int
    profileImage(email: String!): String
    newEmployees: [EmployeeDTO]


    #UserManagement:
    user(userId: Int): UserDto
    users(search: String, roleId: Int, status: Boolean, pageNo: Int, pageSize: Int = 10): UserDtoConnection
    getUsers: [UserDto]



    #Company:
    departments: [Department]
    NumberOfDepartments: Int
    positions: [Position]
    jobLevels: [JobLevel]
    proficiencyLevels: [ProficiencyLevel]
    performanceRanges: [PerformanceRange]
    roles: [Role]
    competencies: [Competency]
    evaluateCycles: [EvaluateCycle]
    evaluateTimeLine(evaluateCycleId: Int!): [TimeLine]
    positionLevelSkills(positionId: Int!, jobLevelId: Int!): [SimpleItemDTO]
    competencyGroups: [CompetencyGroup]



    #HR Dashboard:
    currentHeadcounts(cycleId: Int!): PercentageChangeDTO
    headcountChart: BarChartDTO
    departmentCompleteComp(evaluateCycleId: Int!): MultiBarChartDTO
    competencyEvalProgress(evaluateCycleId: Int!): PieChartDTO
    topCompetencyRating(departmentId: Int, cycleId: Int!, pageNo: Int, pageSize: Int): EmployeeRatingPagination
    topPerformers(departmentId: Int, cycleId: Int!, pageNo: Int, pageSize: Int): EmployeeRatingPagination
    topSkill(departmentId: Int, employeeId: Int, evaluateCycleId: Int!, pageNo: Int = 1, pageSize: Int = 10): DataItemPagingDTO
    avgCompetencyScore(positionId: Int, evaluateCycleId: Int!): [HeatmapItemDTO]
    competencyRadarChart(evaluateCycleIds: [Int]!, departmentId: Int!): RadarChartDTO
    employeesPotentialPerformance(departmentId: Int, cycleId: Int): [EmployeePotentialPerformanceDTO]
    performanceByJobLevel(positionId: Int!, cycleId: Int!) : StackedBarChart
    competencyOverviewChart(departmentId: Int, cycleId: Int!): BarChartDTO
    competencyDiffPercent(departmentId: Int, cycleId: Int!): DiffPercentDTO
    performanceOverviewChart(departmentId: Int, cycleId: Int!) : BarChartDTO
    performanceDiffPercent(departmentId: Int, cycleId: Int!) : DiffPercentDTO



    #Employee Dashboard:
    skillGapBarChart(employeeId: Int!, cycleId: Int!): BarChartDTO
    employeeOverview(employeeId: Int!): EmployeeOverviewDTO
    topKeenSkillEmployee(employeeId: Int!, pageNo: Int = 1, pageSize: Int = 10): DataItemPagingDTO
    topHighestSkillTargetEmployee(employeeId: Int!, pageNo: Int = 1, pageSize: Int = 10, evaluateCycleId: Int!): DataItemPagingDTO
    employeeSkillMatrix(employeeId: Int!): [SkillMatrixTree]
    currentEvaluation(employeeId: Int!): CurrentEvaluation
    historyEvaluation(employeeId: Int!): [HistoryEvaluation]
    overallCompetencyRadarChart(employeeId: Int!, evaluateCycleId: Int!): RadarChartDTO
    qualifications(employeeId: Int!): [Qualification]
    competencyPieChart(employeeId: Int!, cycleId: Int!): PieChartDTO
    employeePerformanceRatingScore(employeeId: Int!, pageNo: Int = 1, pageSize: Int = 10): DataItemPagingDTO



    #SUM Dashboard:
    departmentId(email: String!): Int
    departmentHeadcount(cycleId: Int!, departmentId: Int!): PercentageChangeDTO
    departmentHeadcountChart(departmentId: Int!): BarChartDTO
    completedEvaluationByPosition(cycleId: Int!, departmentId: Int!): MultiBarChartDTO
    competencyEvaluationProgressPieChart(cycleId: Int!, departmentId: Int!): PieChartDTO
    completedPerformEvaluationByPosition(cycleId: Int!, departmentId: Int!): MultiBarChartDTO
    performanceEvaluationProgressPieChart(cycleId: Int!, departmentId: Int!): PieChartDTO
    departmentSkillHeatMap(cycleId: Int!, employeeIds: [Int]!, competencyIds: [Int]!): [HeatmapItemDTO]
    departmentCompetencyGap(cycleId: Int!, employeeIds: [Int]!): RadarChartDTO
    competencyEvaluationStatus(cycleId: Int!, departmentId: Int!): [EmployeeStatusDTO]
    performanceEvaluationStatus(cycleId: Int!, departmentId: Int!): [EmployeeStatusDTO]
    employeesInDepartment(departmentId: Int!): [NameImageDTO]
    departmentPotentialAndPerformance(departmentId: Int!, cycleId: Int!): [EmployeePotentialPerformanceDTO!]
    departmentGoalProgress(departmentId: Int!, cycleId: Int!): [GoalProgress]


    #cycle-template-rating control
    cyclesOverall: [CycleOverallDTO]


    #Competency Framework
    competencyMatrixTree: [CompetencyMatrixTree]
    competencyBaseLine(positionId: Int!): [HeatmapItemDTO]
    positionOption(name: String!): [PositionOption]

    #Competency Evaluation
    competencyOverall(employeeId: Int!, cycleId: Int!): CompetencyOverall
    competencyEvaluationForm(employeeId: Int!, cycleId: Int!): [CompetencyForm]
    competencyGroupRating(employeeId: Int!, cycleId: Int!): [CompetencyGroupRating]
    managerCompetencyOverall(employeeId: Int!, cycleId: Int!): CompetencyOverall
    managerCompetencyEvaluationForm(employeeId: Int!, cycleId: Int!): [CompetencyForm]
    managerCompetencyGroupRating(employeeId: Int!, cycleId: Int!): [CompetencyGroupRating]
    finalCompetencyOverall(employeeId: Int!, cycleId: Int!): CompetencyOverall
    finalCompetencyEvaluationForm(employeeId: Int!, cycleId: Int!): [CompetencyForm]
    finalCompetencyGroupRating(employeeId: Int!, cycleId: Int!): [CompetencyGroupRating]
    employeeFeedback(employeeId: Int!, cycleId: Int!): [EmployeeFeedback]
    #Manager Competency Evaluation
    competencyEvaluationList(departmentId: Int!, cycleId: Int!, name: String, pageNo: Int = 1, pageSize: Int = 10): EvaluationPaging!
    evaluationTitle(cycleId: Int!): EvaluationTitle!
    #Hr Evaluation Overview
    evaluationOverviewList(cycleId: Int!, name: String, pageNo: Int = 1, pageSize: Int = 10): EvaluationOverviewPaging!



    #Performance Evaluation
    performanceOverall(employeeId: Int!, cycleId: Int!): PerformanceOverall
    performanceCategoryRating(employeeId: Int!, cycleId: Int!): [PerformanceCategoryRating]
    performanceQuestionRating(employeeId: Int!, cycleId: Int!): [PerformanceQuestionRating]
    managerPerformanceOverall(employeeId: Int!, cycleId: Int!): PerformanceOverall
    managerPerformanceCategoryRating(employeeId: Int!, cycleId: Int!): [PerformanceCategoryRating]
    managerPerformanceQuestionRating(employeeId: Int!, cycleId: Int!): [PerformanceQuestionRating]
    finalPerformanceOverall(employeeId: Int!, cycleId: Int!): PerformanceOverall
    finalPerformanceCategoryRating(employeeId: Int!, cycleId: Int!): [PerformanceCategoryRating]
    finalPerformanceQuestionRating(employeeId: Int!, cycleId: Int!): [PerformanceQuestionRating]
    #ManagerPerformanceEvaluation
    performanceEvaluationList(departmentId: Int!, cycleId: Int!, name: String, pageNo: Int = 1, pageSize: Int = 10): EvaluationPaging!

    #Promotion
    promotionList(cycleId: Int!, name: String, pageNo: Int = 1, pageSize: Int = 10): PromotionPaging!
    #Promotion - Comparison
    compareOverviews(employeeIds: [Int!], cycleId: Int!): [CompareOverview]
    compareCompetencyRadarChart(employeeIds: [Int!], cycleId: Int!): ChartData
    compareGoals(employeeIds: [Int!], cycleId: Int!): [CompareGoal]
    compareGoalPieChart(employeeIds: [Int!], cycleId: Int!): ChartData
    comparePerformanceChart(employeeIds: [Int!]): ChartData


    evaluateCyclePeriod(evaluateCycleId: Int!): String

    #PerformanceEvaluation:
    departmentInCompletePerform(evaluateCycleId: Int!): MultiBarChartDTO
    averagePerformanceScore(cycleId: Int!): Float
    performanceCyclePeriod(cycleId: Int!): String

    #CarreerManagement:
    getNextPositionLevel(currentPositionLevelId: Int!): [PositionLevel]
    getCareerPath(employeeId: Int!): PositionLevelNodeDTO

    goalsByDepartmentAndCycle(departmentId: Int!, cycleId: Int!, pageNo: Int, pageSize: Int): EmployeeGoalPagination
    goalsByEmployee(employeeId: Int!, pageNo: Int!, pageSize: Int = 10) : GoalPagination
}
