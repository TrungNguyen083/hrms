# Define a query to fetch employees
type Query {
    #EmployeeManagement:
    employees(departmentIds: [Int], currentContracts: [Int],status: Boolean, name: String, pagingInfo: PagingInfo!): EmployeePaging!
    employee(id: Int!): EmployeeDetail
    newEmployees: [Employee]
    currentHeadcounts: PercentageChangeDTO
    headcountChart: BarChartDTO
    employeeOverview(employeeId: Int!): EmployeeOverviewDTO
    departmentHeadcount(departmentId: Int!): PercentageChangeDTO
    departmentHeadcountChart(departmentId: Int!): BarChartDTO



    #UserManagement:
    login(username: String!, password: String!): Token
    user(userId: Int): UserDto
    users(search: String, roles: [ID] = [1,2,3], status: Boolean, pageNo: Int, pageSize: Int = 10): UserDtoConnection
    getUsers: [UserDto]



    #Company:
    departments: [Department]
    NumberOfDepartments: Int
    positions: [Position]
    jobLevels: [JobLevel]
    roles: [Role]
    competencies: [Competency]
    proficiencyLevels: [ProficiencyLevel]
    competencyCycles: [CompetencyCycle]
    competencyTimeLine(competencyCycleId: Int!): [TimeLine]
    performanceTimeLine(performanceCycleId: Int!): [TimeLine]
    skillSets(positionId: Int!): [SimpleItemDTO]



    #CompetencyEvaluation:
    departmentInCompleteComp(competencyCycleId: Int!): MultiBarChartDTO
    competencyEvalProgress(competencyCycleId: Int!): PieChartDTO
    topCompetencyRating(departmentId: Int, cycleId: Int!, pageNo: Int, pageSize: Int): EmployeeRatingPagination
    avgCompetencyScore(positionId: Int, competencyCycleId: Int!): [HeatmapItemDTO]
    competencyRadarChart(competencyCyclesId: [Int]!, departmentId: Int!): RadarChartDTO
    topSkillSet(departmentId: Int, employeeId: Int, competencyCycleId: Int, pageNo: Int = 1, pageSize: Int = 10): DataItemPagingDTO
    topKeenSkillSetEmployee(employeeId: Int!, pageNo: Int = 1, pageSize: Int = 10): DataItemPagingDTO
    topHighestSkillSetTargetEmployee(employeeId: Int!, pageNo: Int = 1, pageSize: Int = 10): DataItemPagingDTO
    employeeSkillMatrix(employeeId: Int!): [SkillMatrixTree]
    skillMatrixOverall(employeeId: Int!): SkillMatrixOverall
    currentEvaluation(employeeId: Int!): [CurrentEvaluation]
    historyEvaluation(employeeId: Int!): [HistoryEvaluation]
    getOverallCompetencyScore(employeeId: Int!): RadarChartDTO
    skillSetSummarization(employeeId: Int!, cycleId: Int!): SkillSetSummarization
    companyCompetencyDiffPercent(departmentId: Int): DiffPercentDTO
    competencyChart(departmentId: Int): BarChartDTO
    overallCompetencyRadarChart(employeeId: Int!, cycleId: Int!): RadarChartDTO
    skillGapBarChart(employeeId: Int!, cycleId: Int!): BarChartDTO
    departmentEmployees(departmentId: Int!, positionId: Int!): [SimpleItemDTO]
    departmentSkillSetHeatMap(departmentId: Int!, cycleId: Int!, employeeIds: [Int]!, skillSetIds: [Int]): [HeatmapItemDTO]
    competencyEvaluationStatus(cycleId: Int!, departmentId: Int!, pageNo: Int, pageSize: Int): EmployeeStatusPagination
    employeesInDepartment(departmentId: Int!): [NameImageDTO]
    departmentCompetencyGap(cycleId: Int!, employeeIds: [Int]!): RadarChartDTO
    incompletedEvaluationByPosition(cycleId: Int!, departmentId: Int!): MultiBarChartDTO

    #PerformanceEvaluation:
    departmentInCompletePerform(performanceCycleId: Int!): MultiBarChartDTO
    performanceEvalProgress(performanceCycleId: Int!): PieChartDTO
    averagePerformanceScore(cycleId: Int!): Float
    topEmployeePerformance(performanceCycleId: Int!, limit: Int): [EmployeePerformance]
    topPerformers(departmentId: Int, cycleId: Int!, pageNo: Int, pageSize: Int): EmployeeRatingPagination
    employeesPerformance(pageNo: Int, pageSize: Int): EmployeePerformancePagination
    employeesPotentialPerformance(departmentId: Int, cycleId: Int): [EmployeePotentialPerformanceDTO]
    performanceByJobLevel(positionId: Int!, cycleId: Int!) : StackedBarChart
    employeePerformanceRatingScore(employeeId: Int!, pageNo: Int = 1, pageSize: Int = 10): DataItemPagingDTO
    evaluationCycles: [EvaluationCycle]


    #CarreerManagement:
    getNextPositionLevel(currentPositionLevelId: Int!): [PositionLevel]
    getCareerPath(employeeId: Int!): PositionLevelNodeDTO

    goalsByDepartmentAndCycle(departmentId: Int!, cycleId: Int!, pageNo: Int, pageSize: Int): EmployeeGoalPagination
    goalsStatusPieChart(departmentId: Int!, cycleId: Int!) : PieChartDTO
    goalsCountingStatistic(departmentId: Int!, cycleId: Int!): CountAndPercentDTO
    goalsByEmployee(employeeId: Int!, pageNo: Int!, pageSize: Int = 10) : GoalPagination
}
