# Define a query to fetch employees
type Query {
    #EmployeeManagement:
    employees(departmentIds: [Int], currentContracts: [Int],status: Boolean, name: String, pageNo: Int = 1, pageSize: Int = 10): EmployeePaging!
    employee(id: Int!): EmployeeDTO
    newEmployees: [EmployeeDTO]
    currentHeadcounts: PercentageChangeDTO
    headcountChart: BarChartDTO
    departmentHeadcount(departmentId: Int!): PercentageChangeDTO
    departmentHeadcountChart(departmentId: Int!): BarChartDTO
    employeeId(email: String!): Int
    profileImage(email: String!): String


    #UserManagement:
    user(userId: Int): UserDto
    users(search: String, roleId: Int, status: Boolean, pageNo: Int, pageSize: Int = 10): UserDtoConnection
    getUsers: [UserDto]



    #Company:
    departments: [Department]
    NumberOfDepartments: Int
    positions: [Position]
    jobLevels: [JobLevel]
    roles: [Role]
    competencies: [Competency]
    evaluateCycles: [EvaluateCycle]
    evaluateTimeLine(evaluateCycleId: Int!): [TimeLine]
    positionLevelSkills(positionId: Int!, jobLevelId: Int!): [SimpleItemDTO] #old name: skills(positionId: Int!): [SimpleItemDTO]



    #HR Dashboard:
    departmentCompleteComp(evaluateCycleId: Int!): MultiBarChartDTO
    competencyEvalProgress(evaluateCycleId: Int!): PieChartDTO
    topCompetencyRating(departmentId: Int, cycleId: Int!, pageNo: Int, pageSize: Int): EmployeeRatingPagination
    avgCompetencyScore(positionId: Int, evaluateCycleId: Int!): [HeatmapItemDTO]
    competencyRadarChart(evaluateCycleIds: [Int]!, departmentId: Int!): RadarChartDTO
    topPerformers(departmentId: Int, cycleId: Int!, pageNo: Int, pageSize: Int): EmployeeRatingPagination
    employeesPotentialPerformance(departmentId: Int, cycleId: Int): [EmployeePotentialPerformanceDTO]
    performanceByJobLevel(positionId: Int!, cycleId: Int!) : StackedBarChart
    topSkill(departmentId: Int, employeeId: Int, evaluateCycleId: Int, pageNo: Int = 1, pageSize: Int = 10): DataItemPagingDTO
    companyCompetencyDiffPercent(departmentId: Int, cycleId: Int!): DiffPercentDTO
    competencyChart(departmentId: Int, cycleId: Int!): BarChartDTO
    performanceEvaluationOverview(departmentId: Int, cycleId: Int!) : DiffPercentDTO
    performanceRatingScheme(departmentId: Int, cycleId: Int!) : BarChartDTO


    #Employee Dashboard:
    skillGapBarChart(employeeId: Int!, cycleId: Int!): BarChartDTO
    employeeOverview(employeeId: Int!): EmployeeOverviewDTO
    topKeenSkillEmployee(employeeId: Int!, pageNo: Int = 1, pageSize: Int = 10): DataItemPagingDTO
    topHighestSkillTargetEmployee(employeeId: Int!, pageNo: Int = 1, pageSize: Int = 10, evaluateCycleId: Int!): DataItemPagingDTO
    employeeSkillMatrix(employeeId: Int!): [SkillMatrixTree]
    currentEvaluation(employeeId: Int!): CurrentEvaluation
    historyEvaluation(employeeId: Int!): [HistoryEvaluation]
    overallCompetencyRadarChart(employeeId: Int!, evaluateCycleId: Int!): RadarChartDTO
    qualifications(employeeId: Int!): [Qualification]
    competencyPieChart(employeeId: Int!, cycleId: Int!): PieChartDTO
    employeePerformanceRatingScore(employeeId: Int!, pageNo: Int = 1, pageSize: Int = 10): DataItemPagingDTO



    #SUM Dashboard:
    departmentSkillHeatMap(departmentId: Int!, cycleId: Int!, employeeIds: [Int]!, skillIds: [Int]): [HeatmapItemDTO]
    competencyEvaluationStatus(cycleId: Int!, departmentId: Int!, pageNo: Int, pageSize: Int): EmployeeStatusPagination
    departmentCompetencyGap(cycleId: Int!, employeeIds: [Int]!): RadarChartDTO
    inCompletedEvaluationByPosition(cycleId: Int!, departmentId: Int!): MultiBarChartDTO
    employeesInDepartment(departmentId: Int!): [NameImageDTO] #Not yet
    departmentEmployees(departmentId: Int!, positionId: Int!): [SimpleItemDTO] #Not yet

    #cycle-template-rating control
    cyclesOverall: [CycleOverallDTO]
    templates: [TemplateDTO]
    proficiencyLevels: [ProficiencyLevel]







    evaluateCyclePeriod(evaluateCycleId: Int!): String
    evaluateSkillForm(employeeId: Int!): [TreeSimpleData]
    competencyGroups: [CompetencyGroup]
    evaluationResult(employeeId: Int!, cycleId: Int!): [EvaluationResult]
    trackEvaluationProgress(cycleId: Int!, pageNo: Int = 1, pageSize: Int = 10): EmployeeEvaProgressPaging

    #PerformanceEvaluation:
    departmentInCompletePerform(evaluateCycleId: Int!): MultiBarChartDTO
    performanceEvalProgress(evaluateCycleId: Int!): PieChartDTO
    averagePerformanceScore(cycleId: Int!): Float
    potentialAndPerformanceByPosition(departmentId: Int, cycleId: Int, positionId: Int): [EmployeePotentialPerformanceDTO!]
    performanceCyclePeriod(cycleId: Int!): String
    templatedAndQuestion(cycleId: Int!): TemplateQuestionDTO
    feedbacks(feedbackReceiverId: Int!, cycleId: Int!) : [FeedbackDTO]

    #CarreerManagement:
    getNextPositionLevel(currentPositionLevelId: Int!): [PositionLevel]
    getCareerPath(employeeId: Int!): PositionLevelNodeDTO

    goalsByDepartmentAndCycle(departmentId: Int!, cycleId: Int!, pageNo: Int, pageSize: Int): EmployeeGoalPagination
    goalsStatusPieChart(departmentId: Int!, cycleId: Int!) : PieChartDTO
    goalsCountingStatistic(departmentId: Int!, cycleId: Int!): CountAndPercentDTO
    goalsByEmployee(employeeId: Int!, pageNo: Int!, pageSize: Int = 10) : GoalPagination
}
