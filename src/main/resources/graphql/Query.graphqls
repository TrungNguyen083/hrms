# Define a query to fetch employees
type Query {
    employees(pageNo: Int!, pageSize: Int = 10, departmentIds: [Int], currentContracts: [Int],
        status: Boolean, name: String): EmployeePaging!
    employee(id: Int!): Employee
    employeeOfTheMonth: [Employee]
    departments: [Department]
    NumberOfDepartments: Int
    positions: [Position]
    jobLevels: [JobLevel]
    roles: [Role]
    competencies: [Competency]
    proficiencyLevels: [ProficiencyLevel]
    login(username: String!, password: String!): Token
    user(id: Int): UserDto
    users(search: String, roles: [ID] = [1,2,3], status: Boolean, pageNo: Int, pageSize: Int = 10): UserDtoConnection
    currentHeadcounts: Float
    competencyCycles: [CompetencyCycle]
    employeeOverview(id: Int!): EmployeeOverviewDto
    departmentInComplete(competencyCycleId: Int!): [DepartmentInCompleted]
    companyInComplete(competencyCycleId: Int!): Float
    topEmployeePerformance(performanceCycleId: Int!): [EmployeePerformance]
    topEmployeeCompetencies(competencyCycleId: Int!): [EmployeeRating]
    avgCompetencyScore(positionId: Int!, competencyCycleId: Int!): [AvgCompetency]
    competencyRadarChart(competencyCyclesId: [Int]!, departmentId: Int!): RadarChart
}