type Competency {
    id: Int!
    competencyName: String
    description: String
    competencyGroup: CompetencyGroup
}

type DiffPercentDTO{
    first: Float
    second: Float
    diffPercent: Float
    isIncreased: Boolean
}

type PercentageChangeDTO{
    data: Int
    diffPercent: Float
    isIncreased: Boolean
}

type CompetencyChart{
    competencyName: String
    averageScore: Float
}

type CurrentEvaluation{
    cycleName: String
    status: String
    lastUpdated: String
}

type HistoryEvaluation{
    completedDate: String
    nameOfEvaluation: String
    status: String
    score: Float
}

type CompetencyGroup {
    id: Int!
    competencyGroupName: String
    description: String
}

type CompetencyForm {
    competency: CompetencyRating
    skills: [Skill]
    competencyGroupId: Int
}

type CompetencyRating {
    id: Int
    competencyName: String
    comment: String
    rating: Float
}

type CompetencyGroupRating {
    id: Int
    competencyGroupName: String
    weight: Int
    rating: Float
}

type CompetencyOverall {
    employeeId: Int
    evaluationCycleName: String
    firstName: String
    lastName: String
    profileImage: String
    position: String
    level: String
    rating: Float
    status: String
    isSubmit: Boolean
}

type CycleOverallDTO {
    name: String
    status: String
    startDate: String
    dueDate: String
    completedEvaluate: PieChartDTO
    competencyOverall: PieChartDTO
    performanceOverall: PieChartDTO
}

type PositionOption {
    positionId: Int,
    positionLevelName: String,
    skillNo: Int,
}

type CompareOverview {
    profileImage: String
    firstName: String
    lastName: String
    currentPosition: String
    targetPosition: String
}

type ChartData {
    labels: [String]
    datasets: [ChartItem]
}

type ChartItem {
    label: String
    dataset: [Float]
}

type CompareGoal {
    firstName: String
    lastName: String
    goals: [CompareGoalItem]
}

type CompareGoalItem {
    goalName: String
    goalProgress: Int
}