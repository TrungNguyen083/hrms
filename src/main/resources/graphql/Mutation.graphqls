type Mutation {
    #Employee Management
    createProfile(input: EmployeeInput!): Employee
    updateEmployee(input: EmployeeInput!): Employee


    #User Management
    generateToken(authRequest: AuthRequest!): String
    createUser(authRequest: AuthRequest!): Boolean
    updateUsers(userId: Int!, status: Boolean, roleId: Int): Boolean!
    updateUsernamePassword(userId: Int!, username: String!, password: String!): Boolean!
    assignUser(userId: Int!, employeeId: Int!): Boolean!


    #Company Management
    updateProficiencyLevel(id: Int!, input : ProficiencyLevelInput!): ProficiencyLevel
    updatePerformanceRange(id: Int!, input : PerformanceRangeInput!): PerformanceRange

    #Competency Management
    createEvaluateCycle(input: EvaluateCycleInput!): EvaluateCycle
    createCompetencyProcess(input: EvaluationProcessInput!): [TimeLine]
    createSelfCompetencyEvaluation(input: CompetencyEvaluationInput!): Boolean
    createEvaluatorCompetencyEvaluation(input: CompetencyEvaluationInput!): Boolean
    createFinalCompetencyEvaluation(input: CompetencyEvaluationInput!): Boolean

    #Performance Management
    createPerformanceProcess(input: EvaluationProcessInput!): [TimeLine]

    createFeedbackRequest(requestorId: Int!, requestReceiverIds: [Int]!, cycleId: Int!, feedbackReceiverId: Int!): String
}